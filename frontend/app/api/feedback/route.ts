import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { type, message, email } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!message || message.trim().length === 0) {
      return NextResponse.json(
        { error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' },
        { status: 400 }
      )
    }

    if (message.length > 2000) {
      return NextResponse.json(
        { error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)' },
        { status: 400 }
      )
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ:
    // 1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email
    // 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
    // 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Slack/Discord

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞
    const feedback = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      type,
      message,
      email: email || '',
      timestamp: new Date().toISOString()
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log('üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:', {
      id: feedback.id,
      type,
      message: message.substring(0, 100) + '...',
      email: email || '–Ω–µ —É–∫–∞–∑–∞–Ω',
      timestamp: feedback.timestamp,
      userAgent: request.headers.get('user-agent'),
      ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip')
    })

    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram:
    /*
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      const telegramMessage = `
üêõ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

–¢–∏–ø: ${type}
Email: ${email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

–°–æ–æ–±—â–µ–Ω–∏–µ:
${message}
      `
      
      await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: telegramMessage
        })
      })
    }
    */

    return NextResponse.json(
      { 
        success: true, 
        message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' 
      },
      { status: 200 }
    )

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞:', error)
    
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}
